#Cho hai mảng đã có thứ tự, hãy trộn chúng thành một mảng cũng có thứ tự.
#INPUT
#Dòng đầu tiên chứa số T (T < 10) là số test case.
#Mỗi test case có 3 hàng. Hàng đầu tiên chứa hai số n và m (n,m < 500.000) lần lượt là số phần tử của hai mảng A và B. 
Hàng thứ hai chứa n số nguyên được sắp theo thứ tự không giảm, đây chính là các phần tử của mảng A. 
Hàng cuối cùng chứ m số nguyên được sắp theo thứ tự không giảm, đây chính là các phần tử của mảng B.
#OUTPUT
#Ứng với mỗi test case, xuất ra trên một dòng mảng có thứ tự thu được bằng cách trộn hai mảng A và B

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class Chain:
    def __init__(self):
        self.head = None
        self.tail = None

    def insert_node(self, node_data):
        node = Node(node_data)

        if not self.head:
            self.head = node
        else:
            self.tail.next = node

        self.tail = node

def merge_chains(head1, head2):
    if head1.data <= head2.data:
        merged_head = head1
        head1 = head1.next
    else:
        merged_head = head2
        head2 = head2.next

    current = merged_head

    while head1 and head2:
        if head1.data <= head2.data:
            current.next = head1
            head1 = head1.next
        else:
            current.next = head2
            head2 = head2.next
        current = current.next

    if head1:
        current.next = head1
    if head2:
        current.next = head2

    return merged_head

def print_chain(node, sep=' '):
    while node:
        print(node.data, end=sep if node.next else '\n')
        node = node.next

def main():
    tests = int(input())
    for _ in range(tests):
        count1, count2 = map(int, input().split())
        chain1 = Chain()
        chain2 = Chain()

        if count1 > 0:
            values1 = map(int, input().split())
            for item in values1:
                chain1.insert_node(item)

        if count2 > 0:
            values2 = map(int, input().split())
            for item in values2:
                chain2.insert_node(item)

        if count1 == 0:
            merged_head = chain2.head
        elif count2 == 0:
            merged_head = chain1.head
        else:
            merged_head = merge_chains(chain1.head, chain2.head)

        print_chain(merged_head)

if __name__ == "__main__":
    main()
